systems:
  ws_server:
  {
    type: websocket_server, port: 12345,

    # The cert which the websocket will use to establish a tls connection.
    # This can be specified relative to the home directory.
    cert: relative/path/to/certs/websocket_server_json.crt,

    # Private key for the cert.
    # This can be specified relative to the home directory.
    key: relative/path/to/certs/websocket_server_json.key,

    # optional: if present, specify how the server should validate incoming client connections
    authentication:
    {
      # policies are matched in the order they are defined, if a policy is selected, the secret
      # key and algorithm for that policy will be used to validate the client.
      policies:
      [
        {
          # each rule is a key-value pair of the claims to check in a jwt token. If all the rules
          # match, the policy is selected.
          rules:
          {
            # matches if "iss" is "example.com"
            iss: example.com,

            # can use wildcard patterns for matching. Note that strings need to be quoted in yaml
            # if there are special characters
            aud: 'some?n*'

            # any custom claim can be used, not just the registered claims
            myclaim: something
          },

          secret: secret,
          algo: HS256
        },

        # a policy without rules will match any token
        {
          secret: secret2,
          algo: HS256
        }
      ]
    }
  }


# general soss configs
routes:
  mock_to_server: { from: mock, to: ws_server }
  server_to_mock: { from: ws_server, to: mock }

topics:
  client_to_server: { type: "websocket_test/ClientToServer", route: server_to_mock }
  server_to_client: { type: "websocket_test/ServerToClient", route: mock_to_server }
